# -*- mode: org; org-src-preserve-indentation: t; -*-
#+startup: indent overview
#+options: toc:nil
#+latex_header: \setlength{\voffset}{-0.9in}
# #+latex_header: \setlength{\topmargin}{5pt}
#+latex_header: \setlength{\textheight}{1.2\textheight}
#+title: FreeRTOS in Keil, a Kata
#+author: K. Naqvi
#+date: [2025-03-11 Tue]

Here we'll set up a simple application to run
- on f103rb
- using Keil, armclang
- will add FreeRTOS later

* Development notes
** starting with nothing
- coding a simple blinky program from scratch
  - using C++ and C
  - targeting nucleo-f103rb
  - using Keil with armclang (6.13)
  - incorporating freertos (10.5)
  - here's a link to the freertos-f103rb project I'll use during the
    lectures <fill this in>

** restructure code, add skeletal files
Now I'll make a directory structure to hold my application code.
#+begin_src bash :results none
  mkdir -p ense481-kata2/code/app/include
#+end_src

And now I'll create all the source files, in an empty state.
#+begin_src bash :results none
  touch ense481-kata2/code/app/include/FreeRTOSConfig.h
  touch ense481-kata2/code/Makefile
#+end_src

I also want to incorporate freertos, via a symlink.  I've installed
v10.5.1 on my system under =~/VBS/FreeRTOS-LTS=
: ../../FreeRTOS-LTS
and the link is to reside as a sibling to =code=, so it must be placed
under =kata1/code=.
#+begin_src bash :dir ense481-kata2/code :results none
  ln -s ~/VBS/FreeRTOS-LTS/FreeRTOS/FreeRTOS-Kernel/ FreeRTOS-Kernel
#+end_src

** Add some content
Next I'd like to fill in my empty source files, with prebuilt content.

First a Makefile that builds an emacs tags database for freertos.
/Note to self/: To generate this file, use the key sequence =C-u C-c
C-v t= with point inside the block.
#+begin_src makefile :tangle kata1/code/Makefile  :results none
INC := app/include FreeRTOS-Kernel/include
INC += FreeRTOS-Kernel/portable/GCC/ARM_CM3

tags :
	etags app/*.cpp app/include/*.h FreeRTOS-Kernel/*.c \
           FreeRTOS-Kernel/include/*.h \
           FreeRTOS-Kernel/portable/GCC/ARM_CM3/*.[ch]

mostlyclean :
clean : mostlyclean
	rm -f TAGS
#+end_src

The primary source file is =main.cpp=

#+begin_src bash :results none
cat <<EOF > ense481-kata2/code/app/main.cpp
/** A simple app, to demonstrate freertos */

/* standard includes */

/* freertos includes */
#include "FreeRTOS.h"
#include "task.h"

/* HW-specific includes (move to bsp area) */
#include "stm32f10x.h"

int main() {
    
}
EOF
#+end_src

Add the .gitignore file at the top (git root)

#+begin_src bash :results none
cat <<EOF > .gitignore
# ignore emacs backups
*~
EOF
#+end_src

Add a sub .gitignore file in the Keil proj dir
#+begin_src bash :results none
cat <<EOF > ense481-kata2/.gitignore
# ignore emacs backups
*~
# ignore tags file generated by 'etags' in Makefile
/code/TAGS

# ignore uvision-generated files
code/Listings/
code/Objects/
*.uvguix.*
/*.uvoptx

# ignore symlink to freertos: I'm not tracking this
# and anyway I've made it all read-only
/code/FreeRTOS-Kernel
EOF
#+end_src

We also need a FreeRTOSConfig.h.  This file is considered to be part
of the user code so I'm putting it under the =app/include=
directory.

#+begin_src bash :results none
cat <<EOF > ense481-kata2/code/app/include/FreeRTOSConfig.h
/*
 * FreeRTOS Kernel V10.0.1
 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
 *
 * See http://www.freertos.org/a00110.html.
 *----------------------------------------------------------*/

#define configUSE_PREEMPTION        1
#define configUSE_IDLE_HOOK         0
#define configUSE_TICK_HOOK         0
#define configCPU_CLOCK_HZ          ( ( unsigned long ) 72000000 )  
#define configTICK_RATE_HZ          ( ( TickType_t ) 1000 )
#define configMAX_PRIORITIES        ( 5 )
#define configMINIMAL_STACK_SIZE    ( ( unsigned short ) 128 )
#define configMAX_TASK_NAME_LEN     ( 16 )
#define configUSE_TRACE_FACILITY    0
#define configUSE_16_BIT_TICKS      0
#define configIDLE_SHOULD_YIELD     1

/* memory allocation related definitions */
#define configTOTAL_HEAP_SIZE              ( ( size_t ) ( 2 * 1024 ) )
#define configSUPPORT_STATIC_ALLOCATION    0
#define configSUPPORT_DYNAMIC_ALLOCATION   1

/* Hook function related definitions */
#define configUSE_MALLOC_FAILED_HOOK 0

/* Co-routine definitions. */
#define configUSE_CO_ROUTINES       0
#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )

/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */

/* optional functions - most linkers will remove unused fcns anyway */
#define INCLUDE_vTaskPrioritySet        1
#define INCLUDE_uxTaskPriorityGet       1
#define INCLUDE_vTaskDelete             1
#define INCLUDE_vTaskCleanUpResources   0
#define INCLUDE_vTaskSuspend            1
#define INCLUDE_vTaskDelayUntil         1
#define INCLUDE_vTaskDelay              1

/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
(lowest) to 0 (1?) (highest). */
#define configKERNEL_INTERRUPT_PRIORITY         255
/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY    191 /* equivalent to 0xb0, or priority 11. */


/* This is the value being used as per the ST library which permits 16
priority values, 0 to 15.  This must correspond to the
configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NVIC value of 255. */
#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY 15

#endif /* FREERTOS_CONFIG_H */
EOF
#+end_src

The above include file sets the heap size to 2kiB.  I have decided to
use the =heap_4.c= manager.  Note: this link to [[https://www.freertos.org/a00110.html][FreeRTOSConfig.h]]
describes every possible entry and is an essential online reference.

** From within the Keil system:
*** Create a Keil project
- named =kata2=
- place it under the git root, in the directory =./ense481-kata2/
- during the Keil configuration we
  - selected our chip: the stm32f103rb
  - added packages =CMSIS CORE= and =Device Startup=

*** Change the Keil debugger setting
- by default Keil chooses the *ulink2* debug probe (this is used with
  the ball-height controller board: the MCBSTM32EXL)
- we must change it to the *stlink* for the f103rb nucleo board

*** Add all the C and C++ source files to Keil
- change =Source Group 1= to the more meaningful name =main=
- create a new source group for FreeRTOS: =freertos-gcc-arm-cm3=
- add freertos C source files under =code/FreeRTOS-Kernel/=:
  - =event_groups.c=
  - =list.c=
  - =queue.c=
  - =stream_buffer.c=
  - =tasks.c=
  - =timers.c=
  - (I skipped =croutine.c=)
  - =portable/GCC/ARM_CM3/port.c=
  - =portable/MemMang/heap_4.c=
- in Keil do a *save all* so the .uvprojx file is updated

*** Tell Keil where to find all include files
The paths to search for includes are specified relative to the *Keil
Project* root (which is different from the *git root*).  That is, the
Keil project root is in this subdir =./ense481-kata2/=, so we set up
the following paths
- =./app/include=
- =./FreeRTOS-Kernel/include=
- =./FreeRTOS-Kernel/portable/GCC/ARM_CM3=

This can be done ``globally'' at the top Keil level =Target 1= which I
did *not* bother to rename.  (You will configure this under the
=C/C++= tab.  Use the *Include Paths* dialog.)

*** Set freertos-specific options
Keil options can be specified at any directory level in the project,
and the settings will apply only to that subdirectory.  This is
particularly useful in my case, because I want to compile my code with
the most extreme warnings enabled, but I want to compile the FreeRTOS
code with reduced warnings (also FreeRTOS is a C project).

In Keil, select the source group =freertos-gcc-arm-cm3=, and select
the *Options for Target* wizard, select the *C/C++ AC6* tab.

This is currently set to the ``Arm Compiler 6 (AC6)'' settings, but we
want to enable the /old/ ``Arm Compiler 5'' (AC5-like) warnings.
These warnings are much less stringent, and will allow FreeRTOS to be
compiled with no flood of warnings which in any case we cannot fix.

*** Do a build with the trivial main.cpp
Now our code builds with no warnings or errors, and just for the
record here are the sizes:
: Program Size: Code=716 RO-data=252 RW-data=0 ZI-data=1752
This means that this system with an *empty* main uses 716+252+0=968
bytes of flash, and 1752 bytes of RAM (plus other RAM entities like
stack usage)

** start using freertos features: tasks
Make the body of main into a task and call =xTaskCreate= on that task,
without starting the scheduler.
- extract contents of main(), place in a function with this signature
  : void blinkPA5(void * blah);
- replace body of main()
#+begin_src C++
void blinkPA5(void * blah) {
    // turn on clock for GPIOA
    ,*((uint32_t volatile *)0x40021018) |= 4;

    // configure PA5 to be output, push-pull, 50MHz
    ,*((uint32_t volatile *)(0x40010800 + 0)) = 0x44344444;

    while (1) {
        // turn on PA5 LED
        ,*((uint32_t volatile *)(0x40010800 + 0xc)) |=  1u<<5;
        for (int volatile counter = 0; counter < 1000000; ++counter) { }

        // turn off PA5 LED
        ,*((uint32_t volatile *)(0x40010800 + 0xc)) &= ~(1u<<5);
        for (int volatile counter = 0; counter < 1000000/2; ++counter) { }
    }
}
int main() {
    BaseType_t retval = xTaskCreate(
        blinkPA5,    // task function
        "my blinky", // task name
        50,          // stack in words
        nullptr,     // optional parameter
        4,           // priority
        nullptr      // optional out: task handle
        );
    configASSERT(retval==pdPASS);

    //blinkPA5(nullptr);  // will not return
    vTaskStartScheduler();

    // deadloop in case we fall through
    while (1) {}
}
#+end_src

** Making freertos work with the Keil startup code

Simply calling =vTaskStartScheduler()= causes a lockup because the
Keil-supplied startup code defines most exceptions as simply
'jump-to-self'.  FreeRTOS, in contrast, expects three exceptions to be
implemented:

- 11 :: SVC: Supervisor call: usually used in OS environments to allow
  application tasks to access system services

- 14 :: PendSV: Pendable service call; an exception usually used by an
  OS in process like context switching.

- 15 :: SYSTICK: System Tick Timer; an exception generated by a timer
  peripheral included in the NVIC (inside the ARM core).  This can be
  used by an OS or can be used as a simple timer peripheral.

In the Keil startup code, in the file =startup_stm32f10x_md.s=, these
are repectively named =SVC_Handler=, =PendSV_Handler=, and
=SysTick_Handler=.  However FreeRTOS uses the names:
- =xPortSVCHandler=
- =xPortPendSVHandler=
- =xPortSysTickHandler=

I added three #defines in =FreeRTOSConfig.h= (under the directory
=code/app/include=)

#+begin_src C
#define vPortSVCHandler     SVC_Handler     // exception #11
#define xPortPendSVHandler  PendSV_Handler  // exception #14
#define xPortSysTickHandler SysTick_Handler // exception #15
#+end_src

There was a bit of near mess-up when I failed to notice that the
/order/ of the function prototypes in FreeRTOS (=port.c=) was 14, 15,
and 11: different from the ``natural'' order.  This could end up with
erroneous code like

#+begin_src C
#define xPortPendSVHandler  SVC_Handler
#define xPortSysTickHandler PendSV_Handler
#define vPortSVCHandler     SysTick_Handler
#+end_src

This would hopefully be spotted in a code review, and in fact Jacob
Meyer spotted me making this error, despite my being aware in advance
of the problem!

** Using assertions
We talked about assertions in lect16 and watched a couple of related
videos from M. Samek.  Now I want to add working assertions to this
project.

FreeRTOS provides an assertion mechanism (used internally) via the
=configASSERT= macro.  This is described in the FreeRTOS reference
manual in §7.3 *Constants that start with ``config''* (p329 of
v10.0.0).  We are free to implement =configASSERT= if, and as, we
choose.

We might decide against linking our own error handling with that of
the kernel, and use instead something like the assertion mechanism
(qassert.h ?) from Miro Samek's QP framework, but I'll go with
=configASSERT= now and that decision can be changed later.

If I assume the system is connected to a debugger, then it's ok to
just spinlock.  I can add this macro to =FreeRTOSConfig.h=.

#+begin_src C++
#define configASSERT( x ) if( ( x ) == 0 ) \
    { taskDISABLE_INTERRUPTS(); while (1) {} }
#+end_src

A more flexible technique is to call =vAssertCalled()= as shown.  Then
do some damage control, or we can store some information about how we
got there.

#+begin_src C++
void vAssertCalled( char const *filename, uint32_t line_num) {
    // damage control
    // record filename, line number, PC, LR, etc
    taskDISABLE_INTERRUPTS();
    while (1) {}  // in a non-debug environment, system reset
}
#+end_src

In the above case, I would
1. In =FreeRTOSConfig.h=, redefine =configASSERT= to call the function
   =vAssertCalled()= with extra parameters.  Above this, but also in
   =FreeRTOSConfig.h=, declare =vAssertCalled()=.
2. Somewhere in my code, /implement/ =vAssertCalled=.

From the Interrupt blog, here is a good article on [[https://interrupt.memfault.com/blog/asserts-in-embedded-systems][Using Asserts in
Embedded Systems]]

** Add new task, define 'race condition'
*** Race Condition: defined in Seacord2013, §7.4:

Uncontrolled concurrency can lead to non-deterministic behavior
(that is a program can exhibit different behavior for the same set
of inputs).  A /race condition/ occurs in any scenario in which two
threads can produce different behavior, depending on which thread
completes first.

Three properties are necessary for a race condition to exist:

1. /Concurrency property/: At least two control flows must be
   executing concurrently.

2. /Shared object property/: A shared race object must be accessed by
   both of the concurrent flows.

3. /Change state property/: At least one of the control flows must
   alter the state of the race object.

*** Blinking a LED on port PA8
- I've wired up my breadboard so that there's a yellow LED on port
  PA8, also known as pin D7 on the nucleo-f103rb board.

- First thing is to 'refactor' the existing blinkPA5(): what's wrong?
  Magic numbers: impossible to reuse or even understand this code
  without the comments.  I'll write code that configures GPIO ports.

*** introduce sempahore: display now 'hands off' control to pa5

- ref manual for freertos §4.x covers semaphore creation and use
  - =xSemaphoreCreateBinary()=, §4.2
  - =xSemaphoreGive()=, §4.13
  - =xSemaphoreTake()=, §4.16

** lect22: Discuss race condition
- last lecture we introduce a semaphore to force two tasks to run in a
  particular sequence. (although there was a bug right at the end, due
  to me forgetting to *initialize* the semaphore prior to using it).

  The following is a recap of the 'discussion' I alluded to.

- Q: is this system free of race conditions?  Recall the definition of a
  race condition from Seacord ``Secure Coding in C and C++''

- discuss

- I think two things make this race-free

  - the way the two tasks are *sequenced* using a semaphore

  - AND the fact that the pa5 (fast) task is coded to finish long
    before task pa8 starts again.

- However this 'safety' is contingent on these facts remaining true.
  What guarantees do we have for that?

  - if the pa5 tasks acquires more responsibilities as the code
    evolves it may violate our assuption

  - the problem is that we still have a shared, mutable object
    (Seacord calls this a ``shared race object''), namely Port A's ODR
    register.

  - analyze: how exactly will this fail?

- Solutions:

  - Locking solution: protect Port A from concurrent access with a
    mutex.

    - =xSemaphoreCreateMutex()=, FreeRTOS ref: §4.6

    - =xSemaphoreGive()=, §4.13

    - =xSemaphoreTake()=, §4.16

  - Lock-free solution: use the BSRR (Bit Set/Reset Register) to ensure all
    access that changes the bits of PortA is *atomic*.  The BSRR
    allows any bit to be set or reset without touching other bits.

    #+begin_example
     31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    #+end_example

    To *set* an output pin /x/ (#0-15) write a 1 to bit /x/ of the BSRR.

    To *clear* an output pin /x/ (#0-15) write a 1 to bit /x+16/ of
    the BSRR.

    So our =gpio_on_off()= function body changes:

    From this:

    #+begin_src c++
    uint32_t mask = 1u << pin;
    if (on)
        base->ODR |= mask;
    else
        base->ODR &= ~mask;
    #+end_src

    To this:

    #+begin_src c++
    uint32_t mask = on ? 1u << pin : 1u << (pin+16u);
    base->BSRR |= 1u << pin;
    #+end_src

** lect22: add serial I/O
There are a number of ways to do this in Keil (and also in any
environment).  Since I'm using Keil at this time, I'll try the methods
available in that environment.  This is documented in the arm software
[[https://arm-software.github.io/CMSIS-Compiler/latest/rt_io.html][github]] (v2.1.0 is the latest).

*** The method, and why it did not work in today's class
One easy way is to use the ``Manage Run-Time Environment''
configuration interface and choose the =Compiler= software component.
Fully expanded, this shows the following hierarchy.
#+begin_example
Compiler
  + I/O
    + File
    + STDERR
      + Breakpoint
      + ITM
      + User
    + STDIN
      + Breakpoint
      + ITM
      + User
    + STDOUT
      + Breakpoint
      + ITM
      + User
    + TTY
      + Breakpoint
      + ITM
      + User
#+end_example

For now I chose only STDOUT.  In the lecture I made an error: I did
not fully expand the options under STDOUT and did not carefully read
this, so I left it in default =Breakpoint= mode.  This defines 2
compile-time symbols:
#+begin_example
RTE_Compiler_IO_STDOUT
RTE_Compiler_IO_STDOUT_BKPT
#+end_example
and in the file =retarget_io.c=, that enables the function
#+begin_src c++
static int stdout_putchar(int ch) {
    __asm("BKPT 0");
    return ch;
}
#+end_src
This explains why my =stdout_putchar()= implementation was not used.

I should have selected =User=.  That defines these symbols
#+begin_example
RTE_Compiler_IO_STDOUT
RTE_Compiler_IO_STDOUT_User
#+end_example
which instead enables this line in =retarget_io.c=:
#+begin_src c++
extern int stdout_putchar(int c);
#+end_src
then a user can implement this function as they wish.

Where are these compile-time constants defined?  Why, under the
project directory =RTE=, in =RTE_Components.h=.
#+begin_example
RTE/
├── Device
│   └── STM32F103RB
│       ├── RTE_Device.h
│       ├── startup_stm32f10x_md.s
│       └── system_stm32f10x.c
└── _Target_1
    └── RTE_Components.h
#+end_example

*** Implementing the 'stdout' function
The simplest way is to put this stub function, somewhere in my code:
#+begin_src c++
int stdout_putchar(int c) {
    return (c);
}
#+end_src
I put it, for now, in =main.cpp=, the universal catchall for all new
features.

This compiles fine but fails to link.  The reason is this: a function
declared in a C++ file is compiled with the C++ compiler, of course,
and therefore uses C++ typesafe linkage.  However this function is to
be called from a C module (in =retarget_io.c=) so we need to force "C"
linkage.
#+begin_src c++
extern "C" int stdout_putchar(int c) {
    return (c);
}
#+end_src
This now compiles, links, and runs.  Placing a breakpoint on the
function clearly shows hexadecimal characters 53, 74, 61, 72, 74,
etc., passed via R0 to the function. ('S', 't', 'a', 'r', 't', etc).

*** Putting the stdout function in a better place
The best place for this function is in =serial-io.cpp=.

#+begin_src c++
extern "C" int stdout_putchar(int c)
{
    // if (c == '\n') {  // insert CR before each NL
    //     while ((USART2->SR & 1u<<7)==0) {  // spin while TDR is occupied
    //     }
    //     USART2->DR = '\r';
    // }

    while ((USART2->SR & 1u<<7)==0) {  // spin while TDR is occupied
    }
    USART2->DR = c;
    return c;
}
#+end_src

Notice that I've commented out some ``character stuffing'' code.  If
desired, and if one is /certain/ that the serial stream will never
carry binary data but only ASCII, then this removes the need to
provide =\r\n= for every newline.
* end sentinal
